import type { MultipartParserOptions } from '@mjackson/multipart-parser';
import {
  isMultipartRequest,
  parseMultipartRequest,
  MultipartPart,
} from '@mjackson/multipart-parser';

/**
 * A file that was uploaded as part of a `multipart/form-data` request.
 */
export class FileUpload extends File {
  /**
   * The name of the <input> field used to upload the file.
   */
  readonly fieldName: string;

  constructor(part: MultipartPart, fieldName: string) {
    super(part.content, part.filename ?? 'file-upload', {
      type: part.mediaType ?? 'application/octet-stream',
    });

    this.fieldName = fieldName;
  }
}

/**
 * A function used for handling file uploads.
 */
export interface FileUploadHandler {
  (file: FileUpload): void | null | string | Blob | Promise<void | null | string | Blob>;
}

async function defaultFileUploadHandler(file: FileUpload): Promise<File> {
  // By default just keep the file around in memory.
  return file;
}

/**
 * Parses a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) body into a [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)
 * object. This is useful when accessing the data contained in a HTTP `multipart/form-data` request
 * generated by a HTML `<form>` element.
 *
 * This is a drop-in replacement for [the built-in `request.formData()` API](https://developer.mozilla.org/en-US/docs/Web/API/Request/formData)
 * with the main difference being the ability to customize the handling of file uploads. Instead of
 * keeping all files in memory, the `uploadHandler` allows you to store the file on disk or a
 * cloud storage service.
 *
 * @param request The `Request` object to parse
 * @param uploadHandler A function that handles file uploads. It receives a `File` object and may return any value that is valid in a `FormData` object
 * @return A `Promise` that resolves to a `FormData` object containing the parsed data
 */
export async function parseFormData(
  request: Request,
  uploadHandler?: FileUploadHandler,
): Promise<FormData>;
export async function parseFormData(
  request: Request,
  parserOptions: MultipartParserOptions,
  uploadHandler?: FileUploadHandler,
): Promise<FormData>;
export async function parseFormData(
  request: Request,
  parserOptions?: MultipartParserOptions | FileUploadHandler,
  uploadHandler: FileUploadHandler = defaultFileUploadHandler,
): Promise<FormData> {
  if (typeof parserOptions === 'function') {
    uploadHandler = parserOptions;
    parserOptions = {};
  } else if (parserOptions == null) {
    parserOptions = {};
  }

  if (!isMultipartRequest(request)) {
    return request.formData();
  }

  let formData = new FormData();

  for await (let part of parseMultipartRequest(request, parserOptions)) {
    let fieldName = part.name;
    if (!fieldName) continue;

    if (part.isFile) {
      let value = await uploadHandler(new FileUpload(part, fieldName));
      if (value != null) {
        formData.append(fieldName, value);
      }
    } else {
      formData.append(fieldName, part.text);
    }
  }

  return formData;
}
